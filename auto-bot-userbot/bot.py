import os
import asyncio
import logging
import signal
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto
from telethon.tl.types import PeerChannel
from telethon.tl.types import Message
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty, Dialog, Channel
from dotenv import load_dotenv
from datetime import datetime, timedelta
from helpers import clean_text_for_open
from telethon.errors import RPCError
import time
import shutil
import json
from collections import OrderedDict, deque
import uuid

load_dotenv()

API_ID = int(os.getenv('API_ID', '26521480'))
API_HASH = os.getenv('API_HASH', '858b8e9363acd79e1122748c621c08e1')
SESSION = os.getenv('SESSION', 'anon')
SAVED_DIR = os.getenv('SAVE_DIR', os.path.join(os.getcwd(), 'saved'))

if not os.path.exists(SAVED_DIR):
    os.makedirs(SAVED_DIR)

client = TelegramClient(
    SESSION, API_ID, API_HASH,
    device_model='MacBook Pro',
    system_version='macOS 12.6',
    app_version='Telegram Desktop 4.15',
    lang_code='ru',
    system_lang_code='ru-RU'
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class LimitedSet:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —É–¥–∞–ª—è–µ—Ç —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Ñ–∞–π–ª–∞.
    """
    def __init__(self, max_size=500, cache_file=None):
        self.max_size = max_size
        self._set = set()
        self._queue = deque(maxlen=max_size)
        self.cache_file = cache_file
        self._load_from_file()

    def add(self, item):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞–±–æ—Ä"""
        if item in self._set:
            return False
        if len(self._set) >= self.max_size:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
            old_item = self._queue.popleft()
            self._set.remove(old_item)
        self._set.add(item)
        self._queue.append(item)
        self._save_to_file()
        return True

    def __contains__(self, item):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞–±–æ—Ä–µ"""
        return item in self._set

    def __len__(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –Ω–∞–±–æ—Ä–∞"""
        return len(self._set)

    def _save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        if not self.cache_file:
            return
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(list(self._set), f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞ –≤ —Ñ–∞–π–ª {self.cache_file}: {e}")

    def _load_from_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.cache_file or not os.path.exists(self.cache_file):
            return
        try:
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                items = json.load(f)
                for item in items:
                    if len(self._set) < self.max_size:
                        self._set.add(item)
                        self._queue.append(item)
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._set)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ {self.cache_file}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞ {self.cache_file}: {e}")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
CACHE_DIR = os.path.join(os.getcwd(), 'cache')
if not os.path.exists(CACHE_DIR):
    os.makedirs(CACHE_DIR)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ñ–∞–π–ª–∞–º–∏ –∫—ç—à–∞
processed_media = LimitedSet(
    max_size=500,
    cache_file=os.path.join(CACHE_DIR, 'processed_media.json')
)
processed_albums = LimitedSet(
    max_size=500,
    cache_file=os.path.join(CACHE_DIR, 'processed_albums.json')
)
processed_documents = LimitedSet(
    max_size=500,
    cache_file=os.path.join(CACHE_DIR, 'processed_documents.json')
)

def maintain_saved_limit():
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    folder = SAVED_DIR
    max_posts = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
    posts = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    for root, dirs, files in os.walk(folder, topdown=False):
        for dir_name in dirs:
            if dir_name.startswith('post_'):
                post_path = os.path.join(root, dir_name)
                posts.append((post_path, os.path.getctime(post_path)))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ)
    posts.sort(key=lambda x: x[1])
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–æ—Å—Ç—ã
    while len(posts) > max_posts:
        post_path, _ = posts.pop(0)
        try:
            shutil.rmtree(post_path)
            logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {post_path}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_path}: {e}")

def save_text_and_source(post_dir, text, source_name, log_prefix=""):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞) –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø–æ—Å—Ç–∞.
    Args:
        post_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–æ—Å—Ç–∞
        text (str): –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        source_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∫–∞–Ω–∞–ª–∞)
        log_prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if text:
        with open(os.path.join(post_dir, 'text_close.txt'), 'w', encoding='utf-8') as f:
            f.write(text.strip())
        with open(os.path.join(post_dir, 'source.txt'), 'w', encoding='utf-8') as f:
            f.write(source_name)
        logging.info(f"{log_prefix}–°–æ—Ö—Ä–∞–Ω–∏–ª —Ç–µ–∫—Å—Ç: {text}")

def save_ready_flag(post_dir):
    """
    –°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª-—Ñ–ª–∞–≥ ready.txt, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ.
    Args:
        post_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–æ—Å—Ç–∞
    """
    with open(os.path.join(post_dir, 'ready.txt'), 'w') as f:
        f.write('ok')


# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ ---
@client.on(events.NewMessage(incoming=True, func=lambda e: e.is_channel))
async def save_channel_message(event):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–ª—å–±–æ–º—ã, –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–æ—Ç–æ, —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏.
    –î–ª—è –∞–ª—å–±–æ–º–æ–≤ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º grouped_id.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç, –∏—Å—Ç–æ—á–Ω–∏–∫, –º–µ–¥–∏–∞ –∏ —Ñ–∞–π–ª ready.txt.
    """
    post_folder = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ saved —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(SAVED_DIR):
            os.makedirs(SAVED_DIR)
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {SAVED_DIR}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if event.media:
            # –î–ª—è –∞–ª—å–±–æ–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ grouped_id
            if event.grouped_id:
                album_key = f"{event.chat_id}_{event.grouped_id}"
                if album_key in processed_albums or not processed_albums.add(album_key):
                    logging.info(f"‚è≠Ô∏è –ê–ª—å–±–æ–º {album_key} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    return
            # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º id
            else:
                media_key = f"{event.chat_id}_{event.id}"
                if media_key in processed_media or not processed_media.add(media_key):
                    logging.info(f"‚è≠Ô∏è –ú–µ–¥–∏–∞ {media_key} —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return
            
        # –î–ª—è —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if event.media and hasattr(event.media, 'document'):
            if event.media.document.mime_type.startswith('image/'):
                doc_key = f"{event.chat_id}_{event.id}"
                if doc_key in processed_documents or not processed_documents.add(doc_key):
                    logging.info(f"‚è≠Ô∏è –§–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç {doc_key} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    return

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        message_id = event.id
        post_folder = os.path.join(SAVED_DIR, f"post_{timestamp}_{message_id}")
        os.makedirs(post_folder, exist_ok=True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–ø–æ—Å–æ–±–æ–º
        if event.grouped_id:
            logging.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {event.chat.title}")
            await save_album(event, post_folder)
        elif event.media and isinstance(event.media, MessageMediaPhoto):
            if not event.text:
                logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {event.chat.title}")
                if os.path.exists(post_folder):
                    shutil.rmtree(post_folder)
                return
            logging.info(f"üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ {event.chat.title}")
            await save_single_photo(event, post_folder)
        elif event.media and hasattr(event.media, 'document'):
            if event.media.document.mime_type.startswith('image/'):
                if not event.text:
                    logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {event.chat.title}")
                    if os.path.exists(post_folder):
                        shutil.rmtree(post_folder)
                    return
                logging.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {event.chat.title}")
                await save_photo_document(event, post_folder)
            else:
                logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {event.chat.title}")
                if os.path.exists(post_folder):
                    shutil.rmtree(post_folder)
                return
        else:
            logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ {event.chat.title}")
            if os.path.exists(post_folder):
                shutil.rmtree(post_folder)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if os.path.exists(post_folder):
            source_info = f"–ö–∞–Ω–∞–ª: @{event.chat.username}\n–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}"
            source_path = os.path.join(post_folder, "source.txt")
            with open(source_path, "w", encoding="utf-8") as f:
                f.write(source_info)

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª ready.txt
            save_ready_flag(post_folder)
            logging.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {post_folder}")

    except Exception as e:
        if post_folder and os.path.exists(post_folder):
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            try:
                error_info = f"–û—à–∏–±–∫–∞: {str(e)}\n–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                error_path = os.path.join(post_folder, "error.txt")
                with open(error_path, "w", encoding="utf-8") as f:
                    f.write(error_info)
            except Exception as inner_e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
            shutil.rmtree(post_folder)

async def save_album(event, post_folder):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞ —Å —Ñ–æ—Ç–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
        album_messages = []
        async for message in client.iter_messages(event.chat_id, min_id=event.id - 10, max_id=event.id + 10):
            if message.grouped_id == event.grouped_id:
                album_messages.append(message)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        album_messages.sort(key=lambda x: x.id)
        total_photos = len(album_messages)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–∞
        has_text = False
        album_text = None
        for msg in album_messages:
            if msg.text:
                has_text = True
                album_text = msg.text
                break

        if not has_text:
            logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∞–ª—å–±–æ–º–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            if os.path.exists(post_folder):
                shutil.rmtree(post_folder)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        saved_files = []
        photo_count = 0
        for msg in album_messages:
            if msg.media and isinstance(msg.media, MessageMediaPhoto):
                photo_count += 1
                logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ {photo_count} –∏–∑ –∞–ª—å–±–æ–º–∞...")
                file = await msg.download_media(file=os.path.join(post_folder, f"photo_{photo_count}.jpg"))
                if file:
                    saved_files.append(file)
            elif msg.media and hasattr(msg.media, 'document') and msg.media.document.mime_type.startswith('image/'):
                photo_count += 1
                logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞ {photo_count} –∏–∑ –∞–ª—å–±–æ–º–∞...")
                file = await msg.download_media(file=os.path.join(post_folder, f"photo_{photo_count}.jpg"))
                if file:
                    saved_files.append(file)
            else:
                pass

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –æ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω
        if album_text:
            original_text = album_text
            cleaned_text = clean_text_for_open(original_text)
            
            with open(os.path.join(post_folder, "text.txt"), "w", encoding="utf-8") as f:
                f.write(cleaned_text)

            with open(os.path.join(post_folder, "text_close.txt"), "w", encoding="utf-8") as f:
                f.write(original_text)
        
        logging.info(f"‚úÖ –ê–ª—å–±–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(saved_files)} —Ñ–æ—Ç–æ")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–∞: {e}")
        if os.path.exists(post_folder):
            shutil.rmtree(post_folder)

async def save_single_photo(event, post_folder):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        if not event.text:
            logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            if os.path.exists(post_folder):
                shutil.rmtree(post_folder)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ...")
        saved_file = await event.download_media(file=os.path.join(post_folder, "photo_1.jpg"))
        if saved_file:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        with open(os.path.join(post_folder, "text.txt"), "w", encoding="utf-8") as f:
            f.write(clean_text_for_open(event.text))
        with open(os.path.join(post_folder, "text_close.txt"), "w", encoding="utf-8") as f:
            f.write(event.text)
        logging.info(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        if os.path.exists(post_folder):
            shutil.rmtree(post_folder)

async def save_photo_document(event, post_folder):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        if not event.text:
            logging.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            if os.path.exists(post_folder):
                shutil.rmtree(post_folder)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç
        logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        saved_file = await event.download_media(file=os.path.join(post_folder, "photo_1.jpg"))
        if saved_file:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        with open(os.path.join(post_folder, "text.txt"), "w", encoding="utf-8") as f:
            f.write(clean_text_for_open(event.text))
        with open(os.path.join(post_folder, "text_close.txt"), "w", encoding="utf-8") as f:
            f.write(event.text)
        logging.info(f"‚úÖ –§–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        if os.path.exists(post_folder):
            shutil.rmtree(post_folder)

async def save_text_post(event, post_folder):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        if event.text:
            #logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {event.text[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
            cleaned_text = clean_text_for_open(event.text)
            #logging.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {cleaned_text[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            
            with open(os.path.join(post_folder, "text.txt"), "w", encoding="utf-8") as f:
                f.write(cleaned_text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            with open(os.path.join(post_folder, "text_close.txt"), "w", encoding="utf-8") as f:
                f.write(event.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            logging.info(f"–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ text.txt –∏ text_close.txt")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")

@client.on(events.NewMessage(pattern='/channels'))
async def channels_command(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channels.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –±–æ—Ç.
    """
    try:
        channels = await get_channels_list()
        if not channels:
            await event.respond("–ë–æ—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.")
            return

        response = "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        for i, channel in enumerate(channels, 1):
            username = f"@{channel['username']}" if channel['username'] else "–ù–µ—Ç username"
            response += f"{i}. {channel['title']}\n"
            response += f"   ID: {channel['id']}\n"
            response += f"   Username: {username}\n"
            response += f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel['participants_count']}\n\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4096
        for i in range(0, len(response), max_length):
            await event.respond(response[i:i + max_length])
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.")

class BotState:
    def __init__(self):
        self.is_shutting_down = False
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5
        self.reconnect_delay = 10  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

if __name__ == '__main__':
    logging.info('–ó–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞...')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
    loop = asyncio.get_event_loop()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    state = BotState()
    
    async def shutdown(signal_name, loop):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if state.is_shutting_down:
            return
            
        state.is_shutting_down = True
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}...")
        
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                if hasattr(client, 'is_connected') and client.is_connected():
                    logging.info("–û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
                    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                    await client.disconnect()
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                    await asyncio.sleep(1)
                    logging.info("–ö–ª–∏–µ–Ω—Ç Telegram –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
            for task in tasks:
                task.cancel()
            
            logging.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await asyncio.sleep(1)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        finally:
            try:
                loop.stop()
                logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ loop: {e}")
    
    def handle_signal(sig, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signal_name = signal.Signals(sig).name
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}")
        # –ó–∞–ø—É—Å–∫–∞–µ–º shutdown –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.run_coroutine_threadsafe(shutdown(signal_name, loop), loop)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signals = (signal.SIGTERM, signal.SIGINT)
    for s in signals:
        signal.signal(s, handle_signal)
    
    while not state.is_shutting_down:
        try:
            with client:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                state.reconnect_attempts = 0
                state.reconnect_delay = 10
                logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram")
                try:
                    client.run_until_disconnected()
                except asyncio.CancelledError:
                    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                    break
                
        except (OSError, RPCError) as e:
            if state.is_shutting_down:
                break
                
            state.reconnect_attempts += 1
            if state.reconnect_attempts > state.max_reconnect_attempts:
                logging.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({state.max_reconnect_attempts}). –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                break
                
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            delay = min(state.reconnect_delay * (2 ** (state.reconnect_attempts - 1)), 300)  # –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
            logging.error(f'–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}. –ü–æ–ø—ã—Ç–∫–∞ {state.reconnect_attempts} –∏–∑ {state.max_reconnect_attempts}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...')
            time.sleep(delay)
            
        except Exception as e:
            if state.is_shutting_down:
                break
                
            logging.error(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...')
            time.sleep(30)
            
        finally:
            if not state.is_shutting_down and state.reconnect_attempts > state.max_reconnect_attempts:
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                pending = asyncio.all_tasks(loop)
                for task in pending:
                    task.cancel()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º loop –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
    try:
        loop.close()
        logging.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ loop: {e}")
        
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    os._exit(0) 