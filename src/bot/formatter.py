import os
import logging
import aiohttp
import base64
import uuid
import asyncio
import json
from typing import Optional, Tuple, Dict
from datetime import datetime, date, timedelta
from dotenv import load_dotenv
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
import sys
sys.path.append(str(Path(__file__).resolve().parent.parent.parent))

from src.utils.token_tracker import TokenUsageTracker
from src.utils.api import format_text_with_sber
from config.settings import (
    SAVE_DIR,
    LOG_FILE,
    LOG_FORMAT,
    LOG_LEVEL,
    FORMAT_PROMPT
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format=LOG_FORMAT,
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
SBER_API_URL = os.getenv('SBER_API_URL', 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions')
SBER_AUTH_URL = os.getenv('SBER_AUTH_URL', 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth')
CLIENT_ID = os.getenv('SBER_CLIENT_ID', 'f6d9a0c5-d03f-40fc-8ce7-3df3f0880a2d')
CLIENT_SECRET = os.getenv('SBER_CLIENT_SECRET', '37c8508b-d0f1-4fff-8af6-1e645180dc5a')

# –õ–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
MONTHLY_TOKEN_LIMIT = 100_000
DAILY_TOKEN_LIMIT = 10_000
SINGLE_REQUEST_LIMIT = 2_000

# –ü–æ—Ä–æ–≥–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
WARNING_THRESHOLD = 80  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% –ª–∏–º–∏—Ç–∞
CRITICAL_THRESHOLD = 90  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 90% –ª–∏–º–∏—Ç–∞

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
TOKEN_STATS_FILE = 'token_stats.json'

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
token_tracker = TokenUsageTracker()

async def get_access_token() -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç Sber API.
    
    Returns:
        Optional[str]: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º Basic Auth –∑–∞–≥–æ–ª–æ–≤–æ–∫
        auth_string = f"{CLIENT_ID}:{CLIENT_SECRET}"
        auth_bytes = auth_string.encode('ascii')
        base64_auth = base64.b64encode(auth_bytes).decode('ascii')
        
        headers = {
            'Authorization': f'Basic {base64_auth}',
            'Content-Type': 'application/x-www-form-urlencoded',
            'RqUID': str(uuid.uuid4())
        }
        
        data = {
            'scope': 'GIGACHAT_API_PERS'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(SBER_AUTH_URL, headers=headers, data=data, ssl=False) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get('access_token')
                else:
                    error_text = await response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status} - {error_text}")
                    return None
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

async def format_text_with_sber(text: str, prompt: str) -> Tuple[Optional[str], dict]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Sber API.
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt (str): –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        Tuple[Optional[str], dict]: (–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        access_token = await get_access_token()
        if not access_token:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
            return None, {}
            
        async with aiohttp.ClientSession() as session:
            headers = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'model': 'GigaChat:latest',
                'messages': [
                    {'role': 'system', 'content': prompt},
                    {'role': 'user', 'content': text}
                ],
                'temperature': 0.7,
                'max_tokens': SINGLE_REQUEST_LIMIT
            }
            
            async with session.post(SBER_API_URL, headers=headers, json=data, ssl=False) as response:
                if response.status == 200:
                    result = await response.json()
                    formatted_text = result['choices'][0]['message']['content']
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
                    usage = result.get('usage', {})
                    prompt_tokens = usage.get('prompt_tokens', 0)
                    completion_tokens = usage.get('completion_tokens', 0)
                    total = usage.get('total_tokens', 0)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
                    token_tracker.add_usage(total, 'text_formatting')
                    
                    token_stats = {
                        'prompt_tokens': prompt_tokens,
                        'completion_tokens': completion_tokens,
                        'total_tokens': total
                    }
                    
                    return formatted_text, token_stats
                else:
                    error_text = await response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ API Sber: {response.status} - {error_text}")
                    return None, {}
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None, {}

async def process_post_folder(post_folder: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –ø–æ—Å—Ç–æ–º, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è —Ç–µ–∫—Å—Ç –∏–∑ text_close.txt
    
    Args:
        post_folder (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–æ—Å—Ç–∞
    """
    text_close_path = Path(post_folder) / 'text_close.txt'
    text_gpt_path = Path(post_folder) / 'text_gpt.txt'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª text_close.txt
    if not text_close_path.exists():
        logging.info(f"–ü—Ä–æ–ø—É—Å–∫ {post_folder}: –Ω–µ—Ç —Ñ–∞–π–ª–∞ text_close.txt")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç
    if text_gpt_path.exists():
        logging.info(f"–ü—Ä–æ–ø—É—Å–∫ {post_folder}: —Ç–µ–∫—Å—Ç —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        with open(text_close_path, 'r', encoding='utf-8') as f:
            text = f.read().strip()
            
        if not text:
            logging.info(f"–ü—Ä–æ–ø—É—Å–∫ {post_folder}: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        logging.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ {post_folder}")
        formatted_text, token_stats = await format_text_with_sber(text, FORMAT_PROMPT)
        
        if formatted_text:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            token_tracker.add_usage(token_stats['total_tokens'], 'text_formatting')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            with open(text_gpt_path, 'w', encoding='utf-8') as f:
                f.write(formatted_text)
            logging.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {text_gpt_path}")
            logging.info(f"üìä –¢–æ–∫–µ–Ω—ã: prompt={token_stats['prompt_tokens']}, completion={token_stats['completion_tokens']}, total={token_stats['total_tokens']}")
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ {post_folder}")
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {post_folder}: {e}")

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–∞–ø–∫–∏ —Å –ø–æ—Å—Ç–∞–º–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö.
    """
    save_dir = Path(SAVE_DIR)
    if not save_dir.exists():
        logging.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {SAVE_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ —Å –ø–æ—Å—Ç–∞–º–∏
    post_folders = [
        folder for folder in save_dir.iterdir()
        if folder.is_dir() and folder.name.startswith('post_')
    ]
    
    if not post_folders:
        logging.info("–ù–µ—Ç –ø–∞–ø–æ–∫ —Å –ø–æ—Å—Ç–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
        
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(post_folders)} –ø–∞–ø–æ–∫ —Å –ø–æ—Å—Ç–∞–º–∏ –≤ {SAVE_DIR}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = token_tracker.get_usage_stats()
    logging.info(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
    logging.info(f"–ú–µ—Å—è—Ü: {stats['monthly']['used']}/{stats['monthly']['limit']} ({stats['monthly']['percent']:.1f}%)")
    logging.info(f"–î–µ–Ω—å: {stats['daily']['used']}/{stats['daily']['limit']} ({stats['daily']['percent']:.1f}%)")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É
    for post_folder in post_folders:
        await process_post_folder(str(post_folder))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = token_tracker.get_usage_stats()
    logging.info(f"\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
    logging.info(f"–ú–µ—Å—è—Ü: {stats['monthly']['used']}/{stats['monthly']['limit']} ({stats['monthly']['percent']:.1f}%)")
    logging.info(f"–î–µ–Ω—å: {stats['daily']['used']}/{stats['daily']['limit']} ({stats['daily']['percent']:.1f}%)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    history = token_tracker.get_usage_history(7)
    if history:
        total_tokens = sum(entry['tokens'] for entry in history)
        logging.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:")
        logging.info(f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
        logging.info(f"–°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–µ–Ω—å: {total_tokens / 7:.1f}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
