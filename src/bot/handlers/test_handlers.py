from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from enum import Enum, auto
from dataclasses import dataclass
from typing import Dict, Optional, List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class State(Enum):
    POST_VIEW = auto()
    MODERATE_MENU = auto()
    CONFIRM_PUBLISH = auto()
    EDIT_MENU = auto()
    EDIT_TEXT_WAIT = auto()
    EDIT_TEXT_CONFIRM = auto()
    EDIT_MEDIA_MENU = auto()
    EDIT_MEDIA_ADD_WAIT = auto()
    EDIT_MEDIA_ADD_CONFIRM = auto()
    EDIT_MEDIA_REMOVE_WAIT = auto()
    EDIT_MEDIA_REMOVE_CONFIRM = auto()
    CONFIRM_DELETE = auto()
    QUICK_DELETE = auto()

@dataclass
class PostContext:
    post_id: str
    chat_id: int
    message_id: int
    state: State
    user_id: Optional[int] = None
    temp_text: Optional[str] = None
    temp_media: Optional[List[str]] = None
    media_to_remove: Optional[List[int]] = None

def get_post_keyboard(post_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –ø–æ—Å—Ç–æ–º (–¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è)"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"moderate_{post_id}"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"quick_delete_{post_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_moderate_keyboard(post_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{post_id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{post_id}")
        ],
        [
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{post_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_edit_keyboard(post_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data=f"edit_text_{post_id}"),
            InlineKeyboardButton("üñº –ú–µ–¥–∏–∞", callback_data=f"edit_media_{post_id}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"moderate_{post_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_media_edit_keyboard(post_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞"""
    keyboard = [
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_media_{post_id}"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_media_{post_id}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{post_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_confirm_keyboard(action: str, post_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{action}_{post_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_{action}_{post_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

class PostHandler:
    def __init__(self):
        self.posts: Dict[str, PostContext] = {}
        
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        data = query.data
        if data.startswith("confirm_") or data.startswith("cancel_"):
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º post_id
            if "_post_" in data:
                post_id = "post_" + data.split("_post_")[-1]
            else:
                post_id = data.split("_")[-1]
            if post_id not in self.posts:
                logging.warning(f"Post {post_id} not found for {data}")
                return
            if data.startswith("confirm_"):
                await self._handle_confirm(query, self.posts[post_id], context)
            else:
                await self._handle_cancel(query, self.posts[post_id])
            return
        if "_post_" in data:
            action, post_id = data.rsplit("_post_", 1)
            post_id = f"post_{post_id}"
            action = action.rstrip("_")
        else:
            parts = data.split("_")
            action = "_".join(parts[:-1])
            post_id = parts[-1]

        if post_id not in self.posts:
            logging.warning(f"Post {post_id} not found")
            return

        post_context = self.posts[post_id]
        
        if action == "moderate":
            await self._show_moderate_menu(query, post_context)
        elif action == "quick_delete":
            await self._show_quick_delete_confirm(query, post_context)
        elif action == "publish":
            await self._show_publish_confirm(query, post_context)
        elif action == "edit":
            await self._show_edit_menu(query, post_context)
        elif action == "edit_text":
            await self._show_text_edit(query, post_context)
        elif action == "edit_media":
            await self._show_media_edit(query, post_context)
        elif action == "add_media":
            await self._show_add_media(query, post_context)
        elif action == "remove_media":
            await self._show_remove_media(query, post_context)

    async def _show_moderate_menu(self, query: CallbackQuery, post_context: PostContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        post_context.state = State.MODERATE_MENU
        keyboard = get_moderate_keyboard(post_context.post_id)
        await query.message.edit_reply_markup(reply_markup=keyboard)

    async def _show_quick_delete_confirm(self, query: CallbackQuery, post_context: PostContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        post_context.state = State.QUICK_DELETE
        keyboard = get_confirm_keyboard("quick_delete", post_context.post_id)
        await query.message.edit_reply_markup(reply_markup=keyboard)

    async def _show_publish_confirm(self, query: CallbackQuery, post_context: PostContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        post_context.state = State.CONFIRM_PUBLISH
        keyboard = get_confirm_keyboard("publish", post_context.post_id)
        await query.message.edit_reply_markup(reply_markup=keyboard)

    async def _show_edit_menu(self, query: CallbackQuery, post_context: PostContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        post_context.state = State.EDIT_MENU
        keyboard = get_edit_keyboard(post_context.post_id)
        await query.message.edit_reply_markup(reply_markup=keyboard)

    async def _show_text_edit(self, query: CallbackQuery, post_context: PostContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        post_context.state = State.EDIT_TEXT_WAIT
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")

    async def _show_media_edit(self, query: CallbackQuery, post_context: PostContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞"""
        post_context.state = State.EDIT_MEDIA_MENU
        keyboard = get_media_edit_keyboard(post_context.post_id)
        await query.message.edit_reply_markup(reply_markup=keyboard)

    async def _show_add_media(self, query: CallbackQuery, post_context: PostContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
        post_context.state = State.EDIT_MEDIA_ADD_WAIT
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

    async def _show_remove_media(self, query: CallbackQuery, post_context: PostContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
        post_context.state = State.EDIT_MEDIA_REMOVE_WAIT
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

    async def _handle_confirm(self, query: CallbackQuery, post_context: PostContext, context: ContextTypes.DEFAULT_TYPE = None):
        action = query.data[len("confirm_"):].rsplit("_post_", 1)[0]
        if post_context is None:
            logging.warning(f"[FSM] confirm: post_context not found for action={action}")
            return
        if action == "edit_text":
            post_context.temp_text = None
            post_context.state = State.POST_VIEW
            self.posts[post_context.post_id] = post_context
            return
        elif action == "add_media":
            post_context.temp_media = []
            post_context.state = State.POST_VIEW
            self.posts[post_context.post_id] = post_context
            return
        elif action == "remove_media":
            # –û—á–∏—â–∞–µ–º temp_media, –µ—Å–ª–∏ media_to_remove –Ω–µ –ø—É—Å—Ç–æ–π
            if post_context.media_to_remove:
                post_context.temp_media = []
            post_context.media_to_remove = []
            post_context.state = State.POST_VIEW
            self.posts[post_context.post_id] = post_context
            return
        elif action == "publish":
            if post_context.post_id in self.posts:
                del self.posts[post_context.post_id]
            return
        elif action == "quick_delete":
            if post_context.post_id in self.posts:
                del self.posts[post_context.post_id]
            return
        elif action == "delete":
            if post_context.post_id in self.posts:
                del self.posts[post_context.post_id]
            return
        else:
            logging.warning(f"[FSM] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ confirm: {action}")
            return

    async def _handle_cancel(self, query: CallbackQuery, post_context: PostContext):
        action = query.data[len("cancel_"):].rsplit("_post_", 1)[0]
        if action == "edit_text":
            post_context.temp_text = None  # –°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
            post_context.state = State.EDIT_MENU
            return
        elif action in ["add_media", "remove_media"]:
            post_context.state = State.EDIT_MEDIA_MENU
            return
        elif action == "publish":
            post_context.state = State.POST_VIEW
            return
        elif action == "quick_delete":
            keyboard = get_post_keyboard(post_context.post_id)
            await query.message.edit_reply_markup(reply_markup=keyboard)
            post_context.state = State.POST_VIEW
            return
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            await self._show_moderate_menu(query, post_context)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞
        post_context = next(
            (p for p in self.posts.values() 
             if p.state in [State.EDIT_TEXT_WAIT, State.EDIT_MEDIA_ADD_WAIT, State.EDIT_MEDIA_REMOVE_WAIT]),
            None
        )
        
        if not post_context:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.from_user.id != post_context.user_id:
            await message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤—ã, –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"
            )
            return
            
        if post_context.state == State.EDIT_TEXT_WAIT:
            post_context.temp_text = message.text
            keyboard = get_confirm_keyboard("edit_text", post_context.post_id)
            await message.reply_text(
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç?",
                reply_markup=keyboard
            )
            post_context.state = State.EDIT_TEXT_CONFIRM
            
        elif post_context.state == State.EDIT_MEDIA_ADD_WAIT:
            if message.photo:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ
                new_photos = []
                for photo in message.photo:
                    try:
                        file = await photo.get_file()
                        path = f"saved/{post_context.post_id}/photo_{len(post_context.temp_media or []) + len(new_photos) + 1}.jpg"
                        await file.download_to_drive(path)
                        new_photos.append(path)
                        logging.info(f"Saved photo to {path}")
                    except Exception as e:
                        logging.error(f"Error saving photo: {e}")
                        await message.reply_text(
                            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
                        )
                        return
                
                if not new_photos:
                    await message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
                    )
                    return
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞
                if post_context.temp_media is None:
                    post_context.temp_media = []
                post_context.temp_media.extend(new_photos)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                keyboard = get_confirm_keyboard("add_media", post_context.post_id)
                await message.reply_text(
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                    reply_markup=keyboard
                )
                post_context.state = State.EDIT_MEDIA_ADD_CONFIRM
                
        elif post_context.state == State.EDIT_MEDIA_REMOVE_WAIT:
            try:
                # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                numbers = [int(n.strip()) for n in message.text.split(',')]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                if all(1 <= n <= len(post_context.temp_media or []) for n in numbers):
                    post_context.media_to_remove = numbers
                    keyboard = get_confirm_keyboard("remove_media", post_context.post_id)
                    await message.reply_text(
                        f"–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ {', '.join(map(str, numbers))}?",
                        reply_markup=keyboard
                    )
                    post_context.state = State.EDIT_MEDIA_REMOVE_CONFIRM
                else:
                    await message.reply_text(
                        f"–ù–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(post_context.temp_media or [])}"
                    )
            except ValueError:
                await message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3)"
                )

def setup_handlers(application: Application):
    post_handler = PostHandler()
    
    application.add_handler(CallbackQueryHandler(
        post_handler.handle_callback,
        pattern=r"^(moderate|quick_delete|publish|edit|delete|confirm|cancel|add_media|remove_media)_"
    ))
    
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        post_handler.handle_message
    ))
    
    application.add_handler(MessageHandler(
        filters.PHOTO,
        post_handler.handle_message
    )) 